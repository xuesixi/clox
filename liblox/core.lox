class Obj {}

class Int {}

class Float {}

class Bool {}

class Nil {}

class Function {
    hash() {
        return native_general_hash(this);
    }
    equal(v) {
        return native_value_equal(this, v);
    }
}

class Closure {
    hash() {
        return native_general_hash(this);
    }
    equal(v) {
        return native_value_equal(this, v);
    }
}

class Method {
    hash() {
        return native_general_hash(this);
    }
    equal(v) {
        return native_value_equal(this, v);
    }
}

class Native {
    hash() {
        return native_general_hash(this);
    }
    equal(v) {
        return native_value_equal(this, v);
    }

}

class Module {
    hash() {
        return native_general_hash(this);
    }
    equal(v) {
        return native_value_equal(this, v);
    }
}

class Class {
    hash() {
        return native_general_hash(this);
    }
    equal(v) {
        return native_value_equal(this, v);
    }
}

class Array {
    iterator() {
        return native_array_iter(this, this.length);
    }
    join(delimiter: String = ", ", prefix: String = "[", suffix: String = "]") {
        return native_value_join(delimiter, prefix, suffix, this);
    }
    hash() {
        return native_general_hash(this);
    }
    equal(v) {
        return native_value_equal(this, v);
    }
    copy(start: Int = 0, end: Int = this.length, new_length: Int = end - start) {
        var new_arr = [new_length];
        array_copy(this, new_arr, start, 0, end - start);
        return new_arr;
    }
}

class Map {
    iterator() {
        return native_map_iter(this);
    }
    hash() {
        return native_general_hash(this);
    }
    equal(v) {
        return native_value_equal(this, v);
    }
    get_or(key, default_value) {
        var value;
        try {
            value = this[key];
        } catch err: IndexError {
            value = default_value;
        }
        return value;
    }
    # native method: delete(key)
}

class String {
    iterator() {
        return StringIter(this);
    }
    hash() {
        return native_general_hash(this);
    }
    equal(v) {
        return native_value_equal(this, v);
    }
    # native char_at(index: Int): String
    # native substring(start: Int, end: Int): String
    # native replace(start: int, end: Int, insert: String): String
}

class NativeObject {
    hash() {
        return native_general_hash(this);
    }
    equal(v) {
        return native_value_equal(this, v);
    }
}

class StringIter {
    init(str: String) {
        this.str = str;
        this.curr = -1;
        this.limit = str.length - 1;
    }
    has_next() {
        return this.curr < this.limit;
    }
    next() {
        return this.str.char_at(this.curr += 1);
    }
}

fun concat(values...) {
    return native_string_combine_array(values);
}

fun join(arr: Array, delimiter: String = "", prefix: String = "", suffix: String = "") {
    return native_value_join(delimiter, prefix, suffix, arr);
}

// when the array contains only strings, this function is faster
fun string_join(arr: Array, delimiter: String = "", prefix: String = "", suffix: String = "") {
    return native_string_join(delimiter, prefix, suffix, arr);
}

fun benchmark(task) {
    var start = clock();
    task();
    print f("takes time: #", clock() - start);
}

class Error {
    init(message: String) {
        this.message = "Error: " + message;
    }
}

// inappropriate type
class TypeError: Error {
    init(message: String) {
        this.message = ("TypeError: " + message);
    }
} 

// index out of bound
class IndexError: Error {
    init(message: String) {
        this.message = ("IndexError: " + message);
    }
} 

// arg number does work match param number
class ArgError: Error {
    init(message: String) {
        this.message = ("ArgError: " + message);
    }
} 

// no such variable
class NameError: Error {
    init(message: String) {
        this.message = ("NameError: " + message);
    }
} 

// no such property
class PropertyError: Error {
    init(message: String) {
        this.message = ("PropertyError: " + message);
    }
} 

class ValueError: Error {
    init(message: String) {
        this.message = ("ValueError: " + message);
    }
}

// e.g. stack overflow
class FatalError: Error {
    init(message: String) {
        this.message = ("FatalError: " + message);
    }
} 

// import a module that fails to compile
class CompileError: Error {
    init(message: String) {
        this.message = ("CompileError: " + message);
    }
} 

class IOError: Error {
    init(message: String) {
        this.message = ("IOError: " + message);
    }
}

export 
Obj, String, Array, Int, Float, Bool, Nil, Function, Method, Native, Module, Class, Closure, Map,
concat, join, string_join, benchmark, 
Error, TypeError, IndexError, ArgError, NameError, PropertyError, ValueError, FatalError, CompileError, IOError
;
