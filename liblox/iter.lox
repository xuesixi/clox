fun range(start, end = nil, step = 1) {
    if (end == nil) {
        end = start;
        start = 0;
    }
    return RangeIter(start, end, step);
}

class RangeIter {
    init(start, end, step) {
        this.curr = start - step;
        this.step = step;
        this.limit = end - step;
    }
    iterator() {
        return this;
    }
    has_next() {
        return this.curr < this.limit;
    }
    next() {
        return this.curr += this.step;
    }
}

class RangeIter2 {
    init(start, end, step) {
        this.curr = start;
        this.step = step;
        this.end = end;
    }
    iterator() {
        return this;
    }
    has_next() {
        return this.curr < this.end;
    }
    next() {
        var result = this.curr;
        this.curr += this.step;
        return result;
    }
}

fun foreach(iterable, handler = $(e) {print e;}) {
    for i in iterable {
        handler(i);
    }
}

fun enum(iterable) {
    return EnumIter(iterable.iterator());
}

class EnumIter {
    init(iter) {
        this.curr = -1;
        this.iter = iter;
    }
    iterator() {
        return this;
    }
    has_next() {
        return this.iter.has_next();
    }
    next() {
        return (this.curr += 1), this.iter.next();
    }
}

export foreach, range, enum;
