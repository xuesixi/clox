// entry: (key, value, hash)
// empty entry: both key and value are nil
// del mark: key is nil, value is not nil
class HashMap {
    init() {
        this.size = 0;
        this.capacity = 0;
        this.backing = [0];
    }
    get(key) {
        if (this.size == 0) {
            return nil;
        }
        var h = key.hash();
        var cap = this.capacity;
        var index = h % cap;
        for i in range(cap) {
            var curr = (index + i) % cap;
            var entry = this.backing[curr];
            var e_key = entry[0];
            var e_value = entry[1];
            var e_hash = entry[2];
            if (e_key == nil and e_value == nil) {
                return nil;
            } else if (e_hash == h and e_key.equal(key)) {
                return e_value;
            } 
        }
        return nil;
    }
    set(key, value, h: Int = key.hash()) {
        this.check_resize();
        var cap = this.capacity;
        var index = h % cap;
        var del_mark = nil;
        for i in range(cap) {
            var curr = (index + i) % cap;
            var entry = this.backing[curr];
            var e_key = entry[0];
            var e_value = entry[1];
            var e_hash = entry[2];
            if (e_key == nil and e_value == nil) {
                if (del_mark == nil) {
                    entry[0] = key;
                    entry[1] = value;
                    entry[2] = h;
                    this.size += 1;
                } else {
                    del_mark[0] = key;
                    del_mark[1] = value;
                    del_mark[2] = h;
                }
                return;
            } else if (e_hash == h and e_key.equal(key)) {
                entry[1] = value;
                return;
            } else if (del_mark == nil and e_key == nil) {
                del_mark = entry;
            }
        }
    }
    delete(key) {
        var cap = this.capacity;
        var h = key.hash();
        var index = h % cap;
        for i in range(cap) {
            var entry = this.backing[(index + i) % cap];
            var e_key = entry[0];
            var e_value = entry[1];
            var e_hash = entry[2];
            if (e_key == nil and e_value == nil) {
                return;
            } else if (e_hash == h and e_key.equal(key)) {
                entry[0] = nil;
                entry[1] = 1; // del mark
                return;
            }
        }
    }
    check_resize() {
        if (this.size  < this.capacity * 0.75 ) {
            return;
        }
        var old_backing = this.backing;
        var new_capacity;
        if (this.capacity < 8) {
            new_capacity = 8;
        } else {
            new_capacity = this.capacity * 2;
        }
        this.backing = [new_capacity][3]; // 2d array
        this.capacity = new_capacity;
        this.size = 0;
        for entry in old_backing {
            if (entry[0] != nil) {
                this.set(entry[0], entry[1], entry[2]);
            }
        }
    }
}

class Vector {

    static with_capacity(capacity: Int) {
        var vec = Vector();
        vec.backing = [capacity];
        return vec;
    }

    init(items...) {
        if (items.length == 0) {
            this.size = 0;
            this.backing = [8];
        } else {
            this.size = items.length;
            this.backing = items;
        }
    }

    iterator() {
        return native_array_iter(this.backing, this.size);
    }

    get(index: Int) {
        if (index >= this.size) {
            throw IndexError(f("Index # is out of bound [#, #]", index, 0, this.size - 1));
        }
        return this.backing[index];
    }

    set(index: Int, element) {
        if (index >= this.size) {
            throw IndexError(f("can only set element at index in range [#, #]", index, 0, this.size - 1));
        }
        this.backing[index] = element;
    }

    append(element) {
        if (this.backing.length == this.size) {
            var backing = this.backing;
            var new_capacity = 2 * backing.length;
            var new_backing = [new_capacity];
            array_copy(backing, new_backing, 0, 0, backing.length);
            new_backing[backing.length] = element;
            this.backing = new_backing;
        } else {
            this.backing[this.size] = element;
        }
        this.size += 1;
    }

    insert(element, index: Int) {
        if (index < 0 or index > this.size) {
            throw IndexError(f("can only add to index in range [#, #]", index, 0, this.size));
        }
        var backing = this.backing;
        if (backing.length == this.size) {
            var new_capacity = 2 * backing.length;
            var new_backing = [new_capacity];
            array_copy(backing, new_backing, 0, 0, index);
            array_copy(backing, new_backing, index, index + 1, backing.length - index);
            new_backing[index] = element;
            this.backing = new_backing;
        } else {
            if (index != this.size) {
                var move_length = this.size - index;
                array_copy(this.backing, this.backing, index, index + 1, move_length);
            }
            backing[index] = element;
        }
        this.size += 1;
    }

    pop() {
        if (this.size == 0) {
            throw NoDataError("cannot pop from an empty vector");
        }
        return this.backing[this.size -= 1];
    }

    delete(index: Int) {
        if (this.size == 0) {
            throw NoDataError("cannot delete from an empty vector");
        }
        if (index < 0 or index >= this.size) {
            throw IndexError(f("can only delete at index in range [#, #]", index, 0, this.size - 1));
        }
        var backing = this.backing;
        var move_length = this.size - 1 - index; 
        var result = backing[index];
        array_copy(backing, backing, index + 1, index, move_length);
        this.size -= 1;
        return result;
    }
}

class NoDataError: Error {
    init(message: String) {
        this.message = ("NoDataError: " + message);
    }
}

export HashMap, Vector, NoDataError;